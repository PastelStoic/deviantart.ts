// Generated by ts-to-zod
import { z } from "zod";
import {
  DeviantArtUser,
  DeviantArtUserFriends,
  DeviantArtStatus,
  DeviantArtUserStatuses,
  DeviantArtUserProfile,
  DeviantArtWatchers,
  DeviantArtFriendSearch,
} from "../types/UserTypes.ts";

import { DeviantArtDeviation } from "../types/mod.ts";

export const deviantArtDeviationSchema: z.ZodSchema<DeviantArtDeviation> =
  z.lazy(() =>
    z.object({
      deviationid: z.string(),
      printid: z.string().nullable(),
      url: z.string().optional(),
      title: z.string().optional(),
      category: z.string().optional(),
      category_path: z.string().optional(),
      is_favourited: z.boolean().optional(),
      is_deleted: z.boolean().optional(),
      author: deviantArtUserSchema.optional(),
      stats: z
        .object({
          comments: z.number(),
          favourites: z.number(),
        })
        .optional(),
      published_time: z.string().optional(),
      allows_comments: z.boolean().optional(),
      preview: z
        .object({
          src: z.string(),
          height: z.number(),
          width: z.number(),
          transparency: z.boolean(),
        })
        .optional(),
      content: z
        .object({
          src: z.string(),
          height: z.number(),
          width: z.number(),
          transparency: z.boolean(),
          filesize: z.number(),
        })
        .optional(),
      thumbs: z
        .array(
          z.object({
            src: z.string(),
            height: z.number(),
            width: z.number(),
            transparency: z.boolean(),
          }),
        )
        .optional(),
      videos: z
        .array(
          z.object({
            src: z.string(),
            quality: z.string(),
            filesize: z.number(),
            duration: z.number(),
          }),
        )
        .optional(),
      flash: z
        .object({
          src: z.string(),
          height: z.number(),
          width: z.number(),
        })
        .optional(),
      daily_deviation: z
        .object({
          body: z.string(),
          time: z.string(),
          giver: deviantArtUserSchema,
          suggester: deviantArtUserSchema.optional(),
        })
        .optional(),
      excerpt: z.string().optional(),
      is_mature: z.boolean().optional(),
      is_downloadable: z.boolean().optional(),
      download_filesize: z.number().optional(),
      challenge: z
        .object({
          type: z.array(z.string()),
          completed: z.boolean(),
          tags: z.array(z.string()),
          locked: z.boolean().optional(),
          credit_deviation: z.string().nullable(),
          media: z.array(z.string()),
          level_label: z.string().optional(),
          time_limit: z.number().optional(),
          levels: z.array(z.string()).optional(),
        })
        .optional(),
      challenge_entry: z
        .object({
          challengeid: z.string(),
          challenge_title: z.string(),
          challenge: deviantArtDeviationSchema.optional(),
          timed_duration: z.number(),
          submission_time: z.string(),
        })
        .optional(),
      motion_book: z
        .object({
          embed_url: z.string(),
        })
        .optional(),
    }),
  );

export const deviantArtUserSchema: z.ZodSchema<DeviantArtUser> = z.lazy(() =>
  z.object({
    userid: z.string(),
    username: z.string(),
    usericon: z.string(),
    type: z.string(),
    is_watching: z.boolean().optional(),
    details: z
      .object({
        sex: z.string().nullable(),
        age: z.number().nullable(),
        joinDate: z.string(),
      })
      .optional(),
    geo: z
      .object({
        country: z.string(),
        countryid: z.number(),
        timezone: z.string(),
      })
      .optional(),
    profile: z
      .object({
        user_is_artist: z.boolean(),
        artist_level: z.string().nullable(),
        artist_specialty: z.string().nullable(),
        real_name: z.string(),
        tagline: z.string(),
        website: z.string(),
        cover_photo: z.string(),
        profile_pic: deviantArtDeviationSchema,
      })
      .optional(),
    stats: z
      .object({
        watchers: z.number(),
        friends: z.number(),
      })
      .optional(),
  }),
);

export const deviantArtUserFriendsSchema: z.ZodSchema<DeviantArtUserFriends> =
  z.lazy(() =>
    z.object({
      has_more: z.boolean(),
      next_offset: z.number().nullable(),
      results: z.object({
        user: deviantArtUserSchema,
        is_watching: z.boolean(),
        watches_you: z.boolean(),
        lastvisit: z.string().nullable(),
        watch: z.object({
          friend: z.boolean(),
          deviations: z.boolean(),
          journals: z.boolean(),
          forum_threads: z.boolean(),
          critiques: z.boolean(),
          scraps: z.boolean(),
          activity: z.boolean(),
          collections: z.boolean(),
        }),
      }),
    }),
  );

export const deviantArtStatusSchema: z.ZodSchema<DeviantArtStatus> = z.lazy(
  () =>
    z.object({
      statusid: z.string().optional(),
      body: z.string().optional(),
      ts: z.string().optional(),
      url: z.string().optional(),
      comments_count: z.number().optional(),
      is_share: z.boolean().optional(),
      is_deleted: z.boolean(),
      author: deviantArtUserSchema.optional(),
      items: z
        .array(
          z.object({
            type: z.string(),
            status: deviantArtStatusSchema,
            deviation: deviantArtDeviationSchema,
          }),
        )
        .optional(),
    }),
);

export const deviantArtUserStatusesSchema: z.ZodSchema<DeviantArtUserStatuses> =
  z.lazy(() =>
    z.object({
      has_more: z.boolean(),
      next_offset: z.number().nullable(),
      results: z.array(deviantArtStatusSchema),
    }),
  );

export const deviantArtUserProfileSchema: z.ZodSchema<DeviantArtUserProfile> =
  z.lazy(() =>
    z.object({
      user: deviantArtUserSchema,
      is_watching: z.boolean(),
      profile_url: z.string(),
      user_is_artist: z.boolean(),
      artist_level: z.string().nullable(),
      artist_specialty: z.string().nullable(),
      real_name: z.string(),
      tagline: z.string(),
      countryid: z.number(),
      country: z.string(),
      website: z.string(),
      bio: z.string(),
      cover_photo: z.string().nullable(),
      profile_pic: deviantArtDeviationSchema.nullable(),
      last_status: deviantArtStatusSchema.nullable(),
      stats: z.object({
        user_deviations: z.number(),
        user_favourites: z.number(),
        user_comments: z.number(),
        profile_pageviews: z.number(),
        profile_comments: z.number(),
      }),
      collections: z
        .array(
          z.object({
            folderid: z.string(),
            name: z.string(),
          }),
        )
        .optional(),
      galleries: z
        .array(
          z.object({
            folderid: z.string(),
            parent: z.string().nullable(),
            name: z.string(),
          }),
        )
        .optional(),
    }),
  );

export const deviantArtWatchersSchema: z.ZodSchema<DeviantArtWatchers> = z.lazy(
  () =>
    z.object({
      has_more: z.boolean(),
      next_offset: z.number().nullable(),
      results: z.array(
        z.object({
          user: deviantArtUserSchema,
          is_watching: z.boolean(),
          lastvisit: z.string().nullable(),
          watch: z.object({
            friend: z.boolean(),
            deviations: z.boolean(),
            journals: z.boolean(),
            forum_threads: z.boolean(),
            critiques: z.boolean(),
            scraps: z.boolean(),
            activity: z.boolean(),
            collections: z.boolean(),
          }),
        }),
      ),
    }),
);

export const deviantArtFriendSearchSchema: z.ZodSchema<DeviantArtFriendSearch> =
  z.lazy(() =>
    z.object({
      results: z.array(deviantArtUserSchema),
    }),
  );
